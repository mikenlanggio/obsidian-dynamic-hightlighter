###### static.ts
    search: // ## query marks start, end, group
if (
								query.mark?.contains("start") ||
								query.mark?.contains("end")
							) {
								let startDeco = Decoration.widget({
									widget: new IconWidget(query.class + "-start"),
								});
								let endDeco = Decoration.widget({
									widget: new IconWidget(query.class + "-end"),
								});
								if (query.mark?.contains("start"))
									widgetDecos.push(startDeco.range(from, from));
								if (query.mark?.contains("end"))
									widgetDecos.push(endDeco.range(to, to));
							}
							if (query.mark?.contains("group")) {
								let groups;
								if (cursor instanceof RegExpCursor) {
									let match = cursor.value
										?.match as RegExpExecArray;
									groups = match.indices?.groups;
								}
								groups &&
									Object.entries(groups).forEach((group) => {
										try {
											let [groupName, [groupFrom, groupTo]] =
												group;
											const groupDeco = Decoration.mark({
												class: groupName,
											});
											groupDecos.push(
												groupDeco.range(
													linePos + groupFrom,
													linePos + groupTo
												)
											);
										} catch (err) {
											console.debug(err);
										}
									});
							}

###### settings.ts

export type markTypes = "line" | "match" | "group" | "start" | "end";


###### ui.ts

 this.plugin.settings.staticHighlighter.queryOrder.forEach((highlighter) => {
      const { color, query, regex <<<<<<<<<<< } = config.queries[highlighter];

------

 const desc: string[] = [];
      desc.push((regex ? "search expression: " : "search term: ") + query);

------

   const buildMarkerTypes = (parentEl: HTMLElement) => {
      const types: MarkItems = {};
      const marks: MarkTypes = {
        match: { description: "matches", defaultState: true },
        group: { description: "capture groups", defaultState: false },<<<<<<<
        line: { description: "parent line", defaultState: false },
        start: { description: "start", defaultState: false },<<<<<<<<
        end: { description: "end", defaultState: false },<<<<<<<<
----
const wrapper = container.createDiv("mark-wrapper");
        if (type === "group") wrapper.hide(); <<<<<<<<<<<<<
        wrapper.createSpan("match-type").setText(mark.description);
        const component = new ToggleComponent(wrapper).setValue(
          mark.defaultState
        );
----

------
search: regex toggle
    const queryTypeInput = new ToggleComponent(queryWrapper);
    queryTypeInput.toggleEl.addClass("highlighter-settings-regex");
    queryTypeInput.toggleEl.ariaLabel = "Enable Regex";
    queryTypeInput.onChange((value) => {
      if (value) {
        queryInput.setPlaceholder("Search expression");
        // groupWrapper.show();
        marks.group?.element.show(); <<<<<<<<<<<<<<<<<<<<<<
      } else {
        queryInput.setPlaceholder("Search term");
        marks.group?.element.hide();
      }
    });

---------
 .addButton((button) => {
          button
            .setClass("action-button")
            .setClass("action-button-edit")
            .setClass("mod-cta")
            .setIcon("pencil")
            .setTooltip("Edit")
            .onClick(async (evt) => {
              const options = config.queries[highlighter];
              classInput.inputEl.value = highlighter;
              pickrInstance.setColor(options.color);
              queryInput.inputEl.value = options.query;
              pickrInstance.setColor(options.color);
              queryTypeInput.setValue(options.regex); <<<<<<<<<<<<<<<<<<<<<<
              const extensions = basicSetup;
              this.editor.setState(
                EditorState.create({
                  doc: options.css ? options.css : "",
                  extensions: extensions,
                })
              );
-------
         config.queries[className] = {
              class: className,
              color: hexValue || "",
              regex: queryTypeValue, <<<<<<<<<<<<<<<<<<<<<<
              query: queryValue,
              mark: enabledMarks, 
              css: customCss,
              enabled: true,
          };

####### settings.ts
interface SearchQuery {
  query: string;
  class: string;
  color: string | null;
  regex: boolean; <<<<<<<<<<<<<<<<<<<<<<
  mark?: markTypes[];
  css?: string;
  enabled?: boolean;
}